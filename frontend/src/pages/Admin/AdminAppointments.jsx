import React, { useState, useEffect } from "react";
import axios from "axios";
import "../../css/AdminAppointments.css";

const AdminAppointments = () => {
  const [appointments, setAppointments] = useState([]);
  const [filteredAppointments, setFilteredAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({});
  const [filters, setFilters] = useState({
    status: "ALL",
    date: "",
    search: "",
  });

  useEffect(() => {
    fetchAppointments();
    fetchStats();
  }, []);

  useEffect(() => {
    filterAppointments();
  }, [appointments, filters]);

  // H√†m l·∫•y token t·ª´ user object trong localStorage
  const getToken = () => {
    try {
      const userData = localStorage.getItem("user");
      if (!userData) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y user data");
        return null;
      }

      const user = JSON.parse(userData);
      const token = user?.token;

      if (!token) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y token");
        return null;
      }

      return token;
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y token:", error);
      return null;
    }
  };

  const fetchAppointments = async () => {
    try {
      const token = getToken();
      if (!token) {
        alert("‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
        setLoading(false);
        return;
      }

      const response = await axios.get(
        "http://localhost:8080/api/admin/registrations",
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      setAppointments(response.data);
    } catch (error) {
      console.error("‚ùå L·ªói t·∫£i danh s√°ch l·ªãch h·∫πn:", error);

      if (error.response?.status === 403) {
        alert("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn ADMIN ƒë·ªÉ truy c·∫≠p t√≠nh nƒÉng n√†y");
      } else if (error.response?.status === 401) {
        alert("‚ö†Ô∏è Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
      } else {
        alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªãch h·∫πn");
      }
    } finally {
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      const token = getToken();
      if (!token) return;

      const response = await axios.get(
        "http://localhost:8080/api/admin/registrations/stats",
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );
      setStats(response.data);
    } catch (error) {
      console.error("‚ùå L·ªói t·∫£i th·ªëng k√™:", error);
    }
  };

  const filterAppointments = () => {
    let filtered = appointments;

    if (filters.status !== "ALL") {
      filtered = filtered.filter((app) => app.status === filters.status);
    }

    if (filters.date) {
      filtered = filtered.filter((app) => app.appointmentDate === filters.date);
    }

    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      filtered = filtered.filter(
        (app) =>
          app.fullName?.toLowerCase().includes(searchLower) ||
          app.phone?.includes(filters.search) ||
          app.email?.toLowerCase().includes(searchLower)
      );
    }

    setFilteredAppointments(filtered);
  };

  const handleTryApprove = async (appointmentId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën th·ª≠ duy·ªát ƒë∆°n n√†y?")) return;

    try {
      const token = getToken();
      if (!token) return;

      await axios.post(
        `http://localhost:8080/api/admin/registrations/${appointmentId}/try-approve`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      alert("‚úÖ ƒê√£ duy·ªát ƒë∆°n th√†nh c√¥ng!");
      fetchAppointments();
      fetchStats();
    } catch (error) {
      alert(
        `‚ùå ${
          error.response?.data || "Kh√¥ng th·ªÉ duy·ªát ƒë∆°n. C√≥ th·ªÉ ƒë√£ h·∫øt slot."
        }`
      );
    }
  };

  const handleReject = async (appointmentId) => {
    const reason = prompt("Nh·∫≠p l√Ω do t·ª´ ch·ªëi:");
    if (!reason) return;

    try {
      const token = getToken();
      if (!token) return;

      await axios.post(
        `http://localhost:8080/api/admin/registrations/${appointmentId}/reject`,
        reason,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "text/plain",
          },
        }
      );

      alert("‚úÖ ƒê√£ t·ª´ ch·ªëi ƒë∆°n!");
      fetchAppointments();
      fetchStats();
    } catch (error) {
      alert(
        "‚ùå L·ªói khi t·ª´ ch·ªëi ƒë∆°n: " + (error.response?.data || error.message)
      );
    }
  };

  const handleManualReview = async (appointmentId) => {
    try {
      const token = getToken();
      if (!token) return;

      await axios.put(
        `http://localhost:8080/api/admin/registrations/${appointmentId}/manual-review`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      alert("‚úÖ ƒê√£ chuy·ªÉn sang ch·ªù x·ª≠ l√Ω th·ªß c√¥ng!");
      fetchAppointments();
      fetchStats();
    } catch (error) {
      alert(
        "‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: " +
          (error.response?.data || error.message)
      );
    }
  };

  const getStatusBadge = (status) => {
    const statusConfig = {
      APPROVED: { label: "ƒê√É DUY·ªÜT", class: "status-approved" },
      PENDING: { label: "CH·ªú DUY·ªÜT", class: "status-pending" },
      NEEDS_MANUAL_REVIEW: { label: "C·∫¶N X·ª¨ L√ù", class: "status-manual" },
      REJECTED: { label: "ƒê√É T·ª™ CH·ªêI", class: "status-rejected" },
    };

    const config = statusConfig[status] || {
      label: status,
      class: "status-default",
    };
    return (
      <span className={`status-badge ${config.class}`}>{config.label}</span>
    );
  };

  const formatDate = (dateString) => {
    if (!dateString) return "Ch∆∞a c√≥";
    return new Date(dateString).toLocaleDateString("vi-VN");
  };

  if (loading) {
    return (
      <div className="admin-appointments-container">
        <div className="loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>
      </div>
    );
  }

  return (
    <div className="admin-appointments-container">
      <div className="admin-header">
        <h1>üîÑ Qu·∫£n l√Ω L·ªãch h·∫πn B·ªánh nh√¢n</h1>
        <p>Qu·∫£n l√Ω v√† x·ª≠ l√Ω c√°c ƒë∆°n ƒëƒÉng k√Ω kh√°m b·ªánh</p>
      </div>

      {/* Th·ªëng k√™ */}
      <div className="stats-grid">
        <div className="stat-card total">
          <h3>T·ªïng ƒë∆°n</h3>
          <p className="stat-number">{appointments.length}</p>
        </div>
        <div className="stat-card approved">
          <h3>ƒê√£ duy·ªát</h3>
          <p className="stat-number">{stats.APPROVED || 0}</p>
        </div>
        <div className="stat-card pending">
          <h3>Ch·ªù x·ª≠ l√Ω</h3>
          <p className="stat-number">{stats.NEEDS_MANUAL_REVIEW || 0}</p>
        </div>
        <div className="stat-card rejected">
          <h3>T·ª´ ch·ªëi</h3>
          <p className="stat-number">{stats.REJECTED || 0}</p>
        </div>
      </div>

      {/* B·ªô l·ªçc */}
      <div className="filters-section">
        <div className="filter-group">
          <label>Tr·∫°ng th√°i:</label>
          <select
            value={filters.status}
            onChange={(e) => setFilters({ ...filters, status: e.target.value })}
          >
            <option value="ALL">T·∫•t c·∫£</option>
            <option value="APPROVED">ƒê√£ duy·ªát</option>
            <option value="PENDING">Ch·ªù duy·ªát</option>
            <option value="NEEDS_MANUAL_REVIEW">C·∫ßn x·ª≠ l√Ω</option>
            <option value="REJECTED">ƒê√£ t·ª´ ch·ªëi</option>
          </select>
        </div>

        <div className="filter-group">
          <label>Ng√†y kh√°m:</label>
          <input
            type="date"
            value={filters.date}
            onChange={(e) => setFilters({ ...filters, date: e.target.value })}
          />
        </div>

        <div className="filter-group">
          <label>T√¨m ki·∫øm:</label>
          <input
            type="text"
            placeholder="T√™n, SƒêT, Email..."
            value={filters.search}
            onChange={(e) => setFilters({ ...filters, search: e.target.value })}
          />
        </div>

        <button
          className="clear-filters"
          onClick={() => setFilters({ status: "ALL", date: "", search: "" })}
        >
          X√≥a b·ªô l·ªçc
        </button>
      </div>

      {/* Danh s√°ch l·ªãch h·∫πn */}
      <div className="appointments-list">
        <div className="list-header">
          <h2>Danh s√°ch L·ªãch h·∫πn ({filteredAppointments.length})</h2>
          <button className="refresh-btn" onClick={fetchAppointments}>
            üîÑ L√†m m·ªõi
          </button>
        </div>

        {filteredAppointments.length === 0 ? (
          <div className="no-data">
            <p>üì≠ Kh√¥ng c√≥ l·ªãch h·∫πn n√†o ph√π h·ª£p</p>
          </div>
        ) : (
          <div className="appointments-grid">
            {filteredAppointments.map((appointment) => (
              <div key={appointment.id} className="appointment-card">
                <div className="card-header">
                  <h3>{appointment.fullName || "Ch∆∞a c√≥ t√™n"}</h3>
                  {getStatusBadge(appointment.status)}
                </div>

                <div className="card-content">
                  <div className="info-row">
                    <span className="label">üìû SƒêT:</span>
                    <span>{appointment.phone || "Ch∆∞a c√≥"}</span>
                  </div>
                  <div className="info-row">
                    <span className="label">üìß Email:</span>
                    <span>{appointment.email || "Ch∆∞a c√≥"}</span>
                  </div>
                  <div className="info-row">
                    <span className="label">üè• Khoa:</span>
                    <span>{appointment.department || "Ch∆∞a c√≥"}</span>
                  </div>
                  <div className="info-row">
                    <span className="label">üìÖ Ng√†y kh√°m:</span>
                    <span>{formatDate(appointment.appointmentDate)}</span>
                  </div>

                  {appointment.status === "APPROVED" && (
                    <div className="approved-details">
                      <div className="info-row highlight">
                        <span className="label">üïí Bu·ªïi kh√°m:</span>
                        <span>{appointment.assignedSession || "Ch∆∞a c√≥"}</span>
                      </div>
                      <div className="info-row highlight">
                        <span className="label">üéØ S·ªë TT:</span>
                        <span className="queue-number">
                          {appointment.queueNumber || "Ch∆∞a c√≥"}
                        </span>
                      </div>
                      <div className="info-row highlight">
                        <span className="label">‚è∞ Khung gi·ªù:</span>
                        <span>{appointment.expectedTimeSlot || "Ch∆∞a c√≥"}</span>
                      </div>
                      <div className="info-row">
                        <span className="label">üö™ Ph√≤ng:</span>
                        <span>{appointment.roomNumber || "Ch∆∞a c√≥"}</span>
                      </div>
                      <div className="info-row">
                        <span className="label">üí∞ Ph√≠ kh√°m:</span>
                        <span>
                          {appointment.examinationFee?.toLocaleString() || "0"}{" "}
                          VND
                        </span>
                      </div>
                    </div>
                  )}

                  {appointment.symptoms && (
                    <div className="symptoms">
                      <span className="label">üìù Tri·ªáu ch·ª©ng:</span>
                      <p>{appointment.symptoms}</p>
                    </div>
                  )}
                </div>

                <div className="card-actions">
                  {appointment.status === "NEEDS_MANUAL_REVIEW" && (
                    <>
                      <button
                        className="btn-approve"
                        onClick={() => handleTryApprove(appointment.id)}
                      >
                        ‚úÖ Th·ª≠ duy·ªát
                      </button>
                      <button
                        className="btn-reject"
                        onClick={() => handleReject(appointment.id)}
                      >
                        ‚ùå T·ª´ ch·ªëi
                      </button>
                    </>
                  )}

                  {appointment.status === "PENDING" && (
                    <button
                      className="btn-manual"
                      onClick={() => handleManualReview(appointment.id)}
                    >
                      üîÑ Chuy·ªÉn x·ª≠ l√Ω th·ªß c√¥ng
                    </button>
                  )}

                  {appointment.status === "APPROVED" && (
                    <div className="approved-info">
                      <span className="success-text">‚úÖ ƒê√£ duy·ªát</span>
                      {appointment.autoApproved && (
                        <span className="auto-badge">ü§ñ T·ª± ƒë·ªông</span>
                      )}
                    </div>
                  )}

                  {appointment.status === "REJECTED" && (
                    <span className="rejected-text">‚ùå ƒê√£ t·ª´ ch·ªëi</span>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminAppointments;
