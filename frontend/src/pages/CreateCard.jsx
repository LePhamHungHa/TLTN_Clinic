import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import QRCode from "react-qr-code";
import axios from "axios";
import "../css/CreateCard.css";

const CreateCard = () => {
  const navigate = useNavigate();
  const [card, setCard] = useState({
    cardHolder: "",
    cardNumber: "",
    cvv: "",
    expiry: "",
  });
  const [wallet, setWallet] = useState(null);
  const [loading, setLoading] = useState(false);
  const [patientInfo, setPatientInfo] = useState(null);
  const [checkingAuth, setCheckingAuth] = useState(true);

  useEffect(() => {
    checkAuthentication();
  }, []);

  const checkAuthentication = async () => {
    const token = localStorage.getItem("token");

    if (!token) {
      console.log("Kh√¥ng t√¨m th·∫•y token, chuy·ªÉn h∆∞·ªõng ƒë·∫øn login");
      navigate("/login");
      return;
    }

    try {
      await fetchPatientInfo(token);
    } catch (error) {
      console.error("L·ªói x√°c th·ª±c:", error);
      navigate("/login");
    } finally {
      setCheckingAuth(false);
    }
  };

  const fetchPatientInfo = async (token) => {
    try {
      // Th·ª≠ l·∫•y th√¥ng tin patient t·ª´ API
      const response = await axios.get(
        "http://localhost:8080/api/patients/me",
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.data) {
        setPatientInfo(response.data);
        // L∆∞u patientId v√†o localStorage ƒë·ªÉ s·ª≠ d·ª•ng sau
        localStorage.setItem("patientId", response.data.id);
        console.log("Th√¥ng tin patient:", response.data);
      }
    } catch (error) {
      console.warn(
        "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin patient t·ª´ API, th·ª≠ ph∆∞∆°ng √°n kh√°c...",
        error
      );

      // Ph∆∞∆°ng √°n d·ª± ph√≤ng: l·∫•y th√¥ng tin t·ª´ token ho·∫∑c t·∫°o t·∫°m
      const patientId = localStorage.getItem("patientId");
      const userEmail = localStorage.getItem("userEmail");

      if (patientId) {
        setPatientInfo({ id: patientId, email: userEmail });
      } else {
        // N·∫øu kh√¥ng c√≥ patientId, t·∫°o t·∫°m object v·ªõi th√¥ng tin c∆° b·∫£n
        setPatientInfo({
          id: Date.now().toString(), // ID t·∫°m
          email: userEmail || "user@example.com",
        });
      }
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;

    // Format s·ªë th·∫ª: t·ª± ƒë·ªông th√™m kho·∫£ng tr·∫Øng m·ªói 4 s·ªë
    if (name === "cardNumber") {
      const cleanedValue = value.replace(/\s/g, "").replace(/\D/g, "");
      const formattedValue = cleanedValue.replace(/(.{4})/g, "$1 ").trim();
      setCard((prev) => ({ ...prev, [name]: formattedValue }));
      return;
    }

    // Format CVV: ch·ªâ cho ph√©p s·ªë, t·ªëi ƒëa 3 k√Ω t·ª±
    if (name === "cvv") {
      const cleanedValue = value.replace(/\D/g, "").slice(0, 3);
      setCard((prev) => ({ ...prev, [name]: cleanedValue }));
      return;
    }

    setCard((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const token = localStorage.getItem("token");
    if (!token) {
      alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      navigate("/login");
      return;
    }

    // Ki·ªÉm tra th√¥ng tin patient
    if (!patientInfo || !patientInfo.id) {
      alert("Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n! Vui l√≤ng th·ª≠ l·∫°i.");
      return;
    }

    setLoading(true);

    try {
      // Format expiry: YYYY-MM -> MM/YY
      const formattedExpiry = card.expiry
        ? card.expiry.slice(5, 7) + "/" + card.expiry.slice(2, 4)
        : "";

      // X√≥a kho·∫£ng tr·∫Øng trong s·ªë th·∫ª
      const cleanedCardNumber = card.cardNumber.replace(/\s/g, "");

      const requestData = {
        cardHolder: card.cardHolder.trim(),
        cardNumber: cleanedCardNumber,
        cvv: card.cvv,
        expiry: formattedExpiry,
      };

      console.log("G·ª≠i request t·∫°o v√≠ cho patientId:", patientInfo.id);
      console.log("Request data:", requestData);

      // G·ªçi API t·∫°o v√≠
      const response = await axios.post(
        "http://localhost:8080/api/wallets/create",
        requestData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      console.log("T·∫°o v√≠ th√†nh c√¥ng:", response.data);
      setWallet(response.data);
    } catch (error) {
      console.error("L·ªói t·∫°o v√≠:", error);

      if (error.response?.status === 401) {
        alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        localStorage.removeItem("token");
        localStorage.removeItem("patientId");
        navigate("/login");
      } else if (error.response?.status === 400) {
        alert(
          "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: " +
            (error.response.data?.message ||
              "Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin th·∫ª")
        );
      } else if (error.response?.data) {
        alert(
          "T·∫°o v√≠ th·∫•t b·∫°i: " +
            (error.response.data.message || error.response.data)
        );
      } else {
        alert("T·∫°o v√≠ th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } finally {
      setLoading(false);
    }
  };

  // Hi·ªÉn th·ªã loading khi ƒëang ki·ªÉm tra authentication
  if (checkingAuth) {
    return (
      <div className="create-card-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>ƒêang ki·ªÉm tra th√¥ng tin...</p>
        </div>
      </div>
    );
  }

  // N·∫øu kh√¥ng c√≥ patientInfo sau khi ki·ªÉm tra
  if (!patientInfo) {
    return (
      <div className="create-card-page">
        <div className="error-container">
          <h2>L·ªói x√°c th·ª±c</h2>
          <p>Kh√¥ng th·ªÉ t·∫£i th√¥ng tin b·ªánh nh√¢n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.</p>
          <button onClick={() => navigate("/login")} className="submit-button">
            ƒêƒÉng nh·∫≠p l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="create-card-page">
      {!wallet ? (
        <form onSubmit={handleSubmit} className="card-form">
          <h2>ƒêƒÉng k√Ω th·∫ª / v√≠ ƒëi·ªán t·ª≠</h2>

          <div className="patient-info">
            <p>
              <strong>Th√¥ng tin b·ªánh nh√¢n:</strong>
            </p>
            <p>Email: {patientInfo.email || "Ch∆∞a c√≥ th√¥ng tin"}</p>
            <p>M√£ b·ªánh nh√¢n: {patientInfo.id}</p>
          </div>

          <div className="form-group">
            <label>Ch·ªß th·∫ª ng√¢n h√†ng *</label>
            <input
              type="text"
              name="cardHolder"
              required
              value={card.cardHolder}
              onChange={handleChange}
              placeholder="NGUYEN VAN A"
              style={{ textTransform: "uppercase" }}
            />
          </div>

          <div className="form-group">
            <label>S·ªë th·∫ª ng√¢n h√†ng *</label>
            <input
              type="text"
              name="cardNumber"
              required
              value={card.cardNumber}
              onChange={handleChange}
              placeholder="1234 5678 9012 3456"
              maxLength={19}
            />
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>CVV *</label>
              <input
                type="password"
                name="cvv"
                required
                value={card.cvv}
                onChange={handleChange}
                placeholder="123"
                maxLength={3}
              />
            </div>

            <div className="form-group">
              <label>Ng√†y h·∫øt h·∫°n *</label>
              <input
                type="month"
                name="expiry"
                required
                value={card.expiry}
                onChange={handleChange}
                min={new Date().toISOString().slice(0, 7)}
              />
            </div>
          </div>

          <button
            type="submit"
            className="submit-button"
            disabled={
              loading ||
              !card.cardHolder ||
              !card.cardNumber ||
              !card.cvv ||
              !card.expiry
            }
          >
            {loading ? "ƒêang x·ª≠ l√Ω..." : "T·∫°o v√≠ ƒëi·ªán t·ª≠"}
          </button>

          <button
            type="button"
            onClick={() => navigate("/")}
            className="cancel-button"
          >
            H·ªßy b·ªè
          </button>
        </form>
      ) : (
        <div className="wallet-success">
          <div className="success-icon">üéâ</div>
          <h2>V√≠ ƒëi·ªán t·ª≠ ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!</h2>

          <div className="wallet-details">
            <div className="detail-item">
              <span className="label">T√™n ch·ªß v√≠:</span>
              <span className="value">{wallet.cardHolder}</span>
            </div>
            <div className="detail-item">
              <span className="label">M√£ v√≠:</span>
              <span className="value code">
                {wallet.walletCode || wallet.id}
              </span>
            </div>
            <div className="detail-item">
              <span className="label">S·ªë d∆∞ ban ƒë·∫ßu:</span>
              <span className="value balance">
                {wallet.balance ? wallet.balance.toLocaleString() : "0"} VNƒê
              </span>
            </div>
          </div>

          <div className="qr-section">
            <p>Qu√©t m√£ QR ƒë·ªÉ n·∫°p ti·ªÅn v√†o v√≠:</p>
            <div className="qr-code">
              <QRCode
                value={wallet.walletCode || wallet.id || "DEFAULT"}
                size={128}
              />
            </div>
          </div>

          <div className="action-buttons">
            <button onClick={() => navigate("/")} className="primary-button">
              V·ªÅ trang ch·ªß
            </button>
            <button
              onClick={() => setWallet(null)}
              className="secondary-button"
            >
              T·∫°o v√≠ kh√°c
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CreateCard;
