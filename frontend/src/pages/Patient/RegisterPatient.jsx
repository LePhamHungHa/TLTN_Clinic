import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate, useLocation } from "react-router-dom";
import "../../css/RegisterPatient.css";

const RegisterClinic = () => {
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [doctors, setDoctors] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [selectedDepartment, setSelectedDepartment] = useState(null);
  const navigate = useNavigate();
  const location = useLocation();
  const patient = location.state?.patient;

  const [formData, setFormData] = useState({
    fullname: patient?.full_name || "",
    email: patient?.email || "",
    birthdate: patient?.dob || "",
    phone: patient?.phone || "",
    gender: patient?.gender || "",
    address: patient?.address || "",
    department: patient?.department || "",
    appointmentDate: patient?.appointment_date || "",
    appointmentTime: patient?.appointment_time || "",
    symptoms: patient?.symptoms || "",
    doctorId: patient?.doctor_id || "",
  });

  // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
  useEffect(() => {
    const token = localStorage.getItem("token");
    const user = JSON.parse(localStorage.getItem("user") || "{}");
    if (!token || !user.username) {
      navigate("/login", { state: { from: "/register-patient" } });
    }
  }, [navigate]);

  // L·∫•y danh s√°ch khoa
  useEffect(() => {
    const fetchDepartments = async () => {
      try {
        const res = await axios.get("http://localhost:8080/api/departments", {
          headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        });
        setDepartments(res.data);
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch khoa:", error);
      }
    };
    fetchDepartments();
  }, []);

  // L·∫•y danh s√°ch b√°c sƒ© theo khoa
  useEffect(() => {
    const fetchDoctors = async () => {
      try {
        const params = {};
        if (formData.department) params.department = formData.department;
        const res = await axios.get("http://localhost:8080/api/doctors", {
          params,
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
          timeout: 10000,
        });
        setDoctors(res.data || []);
      } catch (err) {
        console.error("L·ªói khi l·∫•y danh s√°ch b√°c sƒ©:", err);
      }
    };
    fetchDoctors();
  }, [formData.department]);

  const validateForm = () => {
    const newErrors = {};
    if (!formData.fullname.trim()) newErrors.fullname = "H·ªç v√† t√™n l√† b·∫Øt bu·ªôc";
    if (!formData.email.trim()) {
      newErrors.email = "Email l√† b·∫Øt bu·ªôc";
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "Email kh√¥ng h·ª£p l·ªá";
    }
    if (!formData.birthdate) newErrors.birthdate = "Ng√†y sinh l√† b·∫Øt bu·ªôc";
    if (!formData.phone.trim()) {
      newErrors.phone = "S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc";
    } else if (!/^(0[3|5|7|8|9])+([0-9]{8})$/.test(formData.phone)) {
      newErrors.phone = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá";
    }
    if (!formData.gender) newErrors.gender = "Gi·ªõi t√≠nh l√† b·∫Øt bu·ªôc";
    if (!formData.address.trim()) newErrors.address = "ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc";
    if (!formData.department) newErrors.department = "Chuy√™n khoa l√† b·∫Øt bu·ªôc";
    if (!formData.appointmentDate)
      newErrors.appointmentDate = "Ng√†y kh√°m l√† b·∫Øt bu·ªôc";
    if (!formData.appointmentTime)
      newErrors.appointmentTime = "Bu·ªïi kh√°m l√† b·∫Øt bu·ªôc";
    if (!formData.doctorId) newErrors.doctorId = "Vui l√≤ng ch·ªçn b√°c sƒ©";

    if (formData.appointmentDate) {
      const today = new Date();
      const appointmentDate = new Date(formData.appointmentDate);
      today.setHours(0, 0, 0, 0);
      if (appointmentDate < today) {
        newErrors.appointmentDate = "Ng√†y kh√°m kh√¥ng th·ªÉ l√† ng√†y trong qu√° kh·ª©";
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleChange = (e) => {
    const { id, value } = e.target;
    setFormData((prev) => ({ ...prev, [id]: value }));

    if (id === "department") {
      const dept = departments.find((d) => d.departmentName === value);
      setSelectedDepartment(dept || null);
    }

    if (errors[id]) setErrors((prev) => ({ ...prev, [id]: "" }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    const token = localStorage.getItem("token");
    const user = JSON.parse(localStorage.getItem("user") || "{}");

    console.log("üîç Frontend - FormData:", formData);

    if (!token || !user.username) {
      alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒëƒÉng k√Ω!");
      navigate("/login", { state: { from: "/register-patient" } });
      return;
    }

    setIsSubmitting(true);

    try {
      // S·ª¨A QUAN TR·ªåNG: D√πng camelCase thay v√¨ snake_case
      const payload = {
        fullName: formData.fullname, // ƒê·ªïi full_name -> fullName
        dob: new Date(formData.birthdate).toISOString().split("T")[0],
        gender: formData.gender,
        phone: formData.phone,
        email: formData.email,
        address: formData.address,
        department: formData.department,
        appointmentDate: formData.appointmentDate, // ƒê·ªïi appointment_date -> appointmentDate
        appointmentTime: formData.appointmentTime, // ƒê·ªïi appointment_time -> appointmentTime
        symptoms: formData.symptoms || null,
        doctorId: formData.doctorId || null, // ƒê·ªïi doctor_id -> doctorId
      };

      console.log("üì§ Frontend - Payload being sent:", payload);

      const res = await axios.post(
        "http://localhost:8080/api/patient-registrations",
        payload,
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          timeout: 10000,
        }
      );

      console.log("‚úÖ Backend response:", res.data);
      alert("ƒêƒÉng k√Ω th√†nh c√¥ng! Th√¥ng tin ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o h·ªá th·ªëng.");

      navigate("/payment", {
        state: {
          patientId: res.data.id,
          amount: 200000,
          fullname: formData.fullname,
          phone: formData.phone,
        },
      });

      // Reset form
      setFormData({
        fullname: "",
        email: "",
        birthdate: "",
        phone: "",
        gender: "",
        address: "",
        department: "",
        appointmentDate: "",
        appointmentTime: "",
        symptoms: "",
        doctorId: "",
      });
    } catch (err) {
      console.error("L·ªói ƒëƒÉng k√Ω:", err);
      if (err.response) {
        const { status, data } = err.response;
        console.error("Backend error response:", data);

        if ([400, 422].includes(status)) {
          alert(
            `D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${
              typeof data === "string" ? data : JSON.stringify(data)
            }`
          );
        } else if (status === 401) {
          alert("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
          navigate("/login", { state: { from: "/register-patient" } });
        } else if (status === 500) {
          alert("L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.");
        } else {
          alert(`C√≥ l·ªói x·∫£y ra: ${status} - ${JSON.stringify(data)}`);
        }
      } else if (err.request) {
        alert(
          "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† backend."
        );
      } else {
        alert("C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  const getMinAppointmentDate = () => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return tomorrow.toISOString().split("T")[0];
  };

  return (
    <div className="clinic-registration-container">
      <div className="clinic-registration-card">
        <h1 className="clinic-registration-title">ƒêƒÇNG K√ù KH√ÅM</h1>

        <div className="clinic-notice-box">
          <h3 className="clinic-notice-title">L∆∞u √Ω:</h3>
          <p>
            L·ªãch h·∫πn c√≥ hi·ªáu l·ª±c sau khi c√≥ x√°c nh·∫≠n ch√≠nh th·ª©c t·ª´ Ph√≤ng kh√°m.
          </p>
          <p>Vui l√≤ng cung c·∫•p th√¥ng tin ch√≠nh x√°c ƒë·ªÉ ƒë∆∞·ª£c ph·ª•c v·ª• t·ªët nh·∫•t.</p>
          <p>ƒê·∫∑t l·ªãch tr∆∞·ªõc √≠t nh·∫•t 24 gi·ªù.</p>
        </div>

        <div className="clinic-form-section">
          <h2 className="clinic-form-title">Th√¥ng tin b·ªánh nh√¢n</h2>
          <form onSubmit={handleSubmit} className="clinic-form">
            <div className="clinic-form-grid">
              {/* H·ªç t√™n */}
              <div className="clinic-form-group">
                <label htmlFor="fullname">H·ªç v√† t√™n *</label>
                <input
                  id="fullname"
                  type="text"
                  value={formData.fullname}
                  onChange={handleChange}
                  className={`clinic-form-input ${
                    errors.fullname ? "error" : ""
                  }`}
                  placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                />
                {errors.fullname && (
                  <span className="clinic-error-message">
                    {errors.fullname}
                  </span>
                )}
              </div>

              {/* Email */}
              <div className="clinic-form-group">
                <label htmlFor="email">Email *</label>
                <input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={handleChange}
                  className={`clinic-form-input ${errors.email ? "error" : ""}`}
                  placeholder="example@email.com"
                />
                {errors.email && (
                  <span className="clinic-error-message">{errors.email}</span>
                )}
              </div>

              {/* Ng√†y sinh */}
              <div className="clinic-form-group">
                <label htmlFor="birthdate">Ng√†y sinh *</label>
                <input
                  id="birthdate"
                  type="date"
                  value={formData.birthdate}
                  onChange={handleChange}
                  className={`clinic-form-input ${
                    errors.birthdate ? "error" : ""
                  }`}
                  max={new Date().toISOString().split("T")[0]}
                />
                {errors.birthdate && (
                  <span className="clinic-error-message">
                    {errors.birthdate}
                  </span>
                )}
              </div>

              {/* S·ªë ƒëi·ªán tho·∫°i */}
              <div className="clinic-form-group">
                <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i *</label>
                <input
                  id="phone"
                  type="tel"
                  value={formData.phone}
                  onChange={handleChange}
                  className={`clinic-form-input ${errors.phone ? "error" : ""}`}
                  placeholder="0901234567"
                />
                {errors.phone && (
                  <span className="clinic-error-message">{errors.phone}</span>
                )}
              </div>

              {/* Gi·ªõi t√≠nh */}
              <div className="clinic-form-group">
                <label htmlFor="gender">Gi·ªõi t√≠nh *</label>
                <select
                  id="gender"
                  value={formData.gender}
                  onChange={handleChange}
                  className={`clinic-form-input ${
                    errors.gender ? "error" : ""
                  }`}
                >
                  <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                  <option value="Nam">Nam</option>
                  <option value="N·ªØ">N·ªØ</option>
                  <option value="Kh√°c">Kh√°c</option>
                </select>
                {errors.gender && (
                  <span className="clinic-error-message">{errors.gender}</span>
                )}
              </div>

              {/* ƒê·ªãa ch·ªâ */}
              <div className="clinic-form-group">
                <label htmlFor="address">ƒê·ªãa ch·ªâ *</label>
                <input
                  id="address"
                  type="text"
                  value={formData.address}
                  onChange={handleChange}
                  className={`clinic-form-input ${
                    errors.address ? "error" : ""
                  }`}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß"
                />
                {errors.address && (
                  <span className="clinic-error-message">{errors.address}</span>
                )}
              </div>

              {/* Chuy√™n khoa */}
              <div className="clinic-form-group full-width">
                <label htmlFor="department">Chuy√™n khoa *</label>
                <select
                  id="department"
                  value={formData.department}
                  onChange={handleChange}
                  className={`clinic-form-input ${
                    errors.department ? "error" : ""
                  }`}
                >
                  <option value="">-- Ch·ªçn khoa --</option>
                  {departments.map((dept) => (
                    <option key={dept.id} value={dept.departmentName}>
                      {dept.departmentName}
                    </option>
                  ))}
                </select>
                {selectedDepartment && (
                  <div className="department-description">
                    <strong>M√¥ t·∫£:</strong>
                    <p>{selectedDepartment.description}</p>
                  </div>
                )}
                {errors.department && (
                  <span className="clinic-error-message">
                    {errors.department}
                  </span>
                )}
              </div>

              {/* B√°c sƒ© */}
              <div className="clinic-form-group">
                <label htmlFor="doctorId">Ch·ªçn b√°c sƒ© *</label>
                <select
                  id="doctorId"
                  value={formData.doctorId}
                  onChange={handleChange}
                  className={`clinic-form-input ${
                    errors.doctorId ? "error" : ""
                  }`}
                >
                  <option value="">Ch·ªçn b√°c sƒ©</option>
                  {doctors.map((d) => {
                    const info = [d.fullName, d.degree, d.position]
                      .filter(Boolean)
                      .join(" - ");

                    return (
                      <option key={d.id} value={d.id}>
                        {info}
                      </option>
                    );
                  })}
                </select>

                {errors.doctorId && (
                  <span className="clinic-error-message">
                    {errors.doctorId}
                  </span>
                )}
              </div>

              {/* Ng√†y kh√°m */}
              <div className="clinic-form-group">
                <label htmlFor="appointmentDate">Ng√†y kh√°m *</label>
                <input
                  id="appointmentDate"
                  type="date"
                  min={getMinAppointmentDate()}
                  value={formData.appointmentDate}
                  onChange={handleChange}
                  className={`clinic-form-input ${
                    errors.appointmentDate ? "error" : ""
                  }`}
                />
                {errors.appointmentDate && (
                  <span className="clinic-error-message">
                    {errors.appointmentDate}
                  </span>
                )}
              </div>

              {/* Bu·ªïi kh√°m */}
              <div className="clinic-form-group">
                <label htmlFor="appointmentTime">Bu·ªïi kh√°m *</label>
                <select
                  id="appointmentTime"
                  value={formData.appointmentTime}
                  onChange={handleChange}
                  className={`clinic-form-input ${
                    errors.appointmentTime ? "error" : ""
                  }`}
                >
                  <option value="">Ch·ªçn bu·ªïi kh√°m</option>
                  <option value="S√°ng (8h - 11h30)">S√°ng (8h - 11h30)</option>
                  <option value="Chi·ªÅu (13h - 16h30)">
                    Chi·ªÅu (13h - 16h30)
                  </option>
                  <option value="T·ªëi (17h - 20h)">T·ªëi (17h - 20h)</option>
                </select>
                {errors.appointmentTime && (
                  <span className="clinic-error-message">
                    {errors.appointmentTime}
                  </span>
                )}
              </div>

              {/* Tri·ªáu ch·ª©ng */}
              <div className="clinic-form-group full-width">
                <label htmlFor="symptoms">Tri·ªáu ch·ª©ng</label>
                <textarea
                  id="symptoms"
                  value={formData.symptoms}
                  onChange={handleChange}
                  placeholder="M√¥ t·∫£ tri·ªáu ch·ª©ng c·ªßa b·∫°n (n·∫øu c√≥)..."
                  rows="3"
                  className="clinic-form-textarea"
                />
              </div>
            </div>

            <div className="clinic-form-submit">
              <button
                type="submit"
                className={`clinic-submit-button ${
                  isSubmitting ? "submitting" : ""
                }`}
                disabled={isSubmitting}
              >
                {isSubmitting ? "ƒêang x·ª≠ l√Ω..." : "ƒêƒÉng k√Ω l·ªãch h·∫πn"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default RegisterClinic;
